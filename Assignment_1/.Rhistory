# aps1
# meanbp1
# alb1
# hema1
# crea1
# paco21
# wtkilo1
# dnr1
# resp
# card
# seps
#creating a dataframe to take a list of those variables
# df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
#                     Unmatched = as.numeric(ExtractSmd(table1)))
# print(df_smd)
print("===================================================")
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
table1<- CreateTableOne(vars=colnames(rhc.selected), strata='treatment.swang', data=rhc.small, test=FALSE)
## include standardized mean difference (SMD)
print(table1, smd=TRUE)
## For which variables we do not have a good balance? Look at the slides for a guideline.
#As mentioned in slide 102, variables that have a serious imbalance are the ones with SMD > 0.2
addmargins(table(ExtractSmd(table1) > 0.2))             #counting number of variables with SMD > 0.2, so 12
tab_with_smd <- (ExtractSmd(table1) > 0.2)
#print(tab_with_smd)
print(tab_with_smd[tab_with_smd[1]==TRUE])
# Variables with SMD > 0.2 is:
# Coma
# aps1
# meanbp1
# alb1
# hema1
# crea1
# paco21
# wtkilo1
# dnr1
# resp
# card
# seps
#creating a dataframe to take a list of those variables
# df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
#                     Unmatched = as.numeric(ExtractSmd(table1)))
# print(df_smd)
print("===================================================")
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
table1<- CreateTableOne(vars=colnames(rhc.selected), strata='treatment.swang', data=rhc.small, test=FALSE)
## include standardized mean difference (SMD)
print(table1, smd=TRUE)
## For which variables we do not have a good balance? Look at the slides for a guideline.
#As mentioned in slide 102, variables that have a serious imbalance are the ones with SMD > 0.2
addmargins(table(ExtractSmd(table1) > 0.2))             #counting number of variables with SMD > 0.2, so 12
tab_with_smd <- (ExtractSmd(table1) > 0.2)
#print(tab_with_smd)
print(tab_with_smd[tab_with_smd[0]==TRUE])
# Variables with SMD > 0.2 is:
# Coma
# aps1
# meanbp1
# alb1
# hema1
# crea1
# paco21
# wtkilo1
# dnr1
# resp
# card
# seps
#creating a dataframe to take a list of those variables
# df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
#                     Unmatched = as.numeric(ExtractSmd(table1)))
# print(df_smd)
print("===================================================")
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
table1<- CreateTableOne(vars=colnames(rhc.selected), strata='treatment.swang', data=rhc.small, test=FALSE)
## include standardized mean difference (SMD)
print(table1, smd=TRUE)
## For which variables we do not have a good balance? Look at the slides for a guideline.
#As mentioned in slide 102, variables that have a serious imbalance are the ones with SMD > 0.2
addmargins(table(ExtractSmd(table1) > 0.2))             #counting number of variables with SMD > 0.2, so 12
tab_with_smd <- (ExtractSmd(table1) > 0.2)
#print(tab_with_smd)
# Variables with SMD > 0.2 is:
# Coma
# aps1
# meanbp1
# alb1
# hema1
# crea1
# paco21
# wtkilo1
# dnr1
# resp
# card
# seps
#creating a dataframe to take a list of those variables
df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
Unmatched = as.numeric(ExtractSmd(table1)))
#print(df_smd)
df_smd$variable[df_smd$Unmatched==TRUE]
print("===================================================")
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
table1<- CreateTableOne(vars=colnames(rhc.selected), strata='treatment.swang', data=rhc.small, test=FALSE)
## include standardized mean difference (SMD)
print(table1, smd=TRUE)
## For which variables we do not have a good balance? Look at the slides for a guideline.
#As mentioned in slide 102, variables that have a serious imbalance are the ones with SMD > 0.2
addmargins(table(ExtractSmd(table1) > 0.2))             #counting number of variables with SMD > 0.2, so 12
tab_with_smd <- (ExtractSmd(table1) > 0.2)
#print(tab_with_smd)
# Variables with SMD > 0.2 is:
# Coma
# aps1
# meanbp1
# alb1
# hema1
# crea1
# paco21
# wtkilo1
# dnr1
# resp
# card
# seps
#creating a dataframe to take a list of those variables
df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
Unmatched = as.numeric(ExtractSmd(table1)))
#print(df_smd)
print(df_smd$variable[df_smd$Unmatched==TRUE])
print("===================================================")
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
table1<- CreateTableOne(vars=colnames(rhc.selected), strata='treatment.swang', data=rhc.small, test=FALSE)
## include standardized mean difference (SMD)
print(table1, smd=TRUE)
## For which variables we do not have a good balance? Look at the slides for a guideline.
#As mentioned in slide 102, variables that have a serious imbalance are the ones with SMD > 0.2
addmargins(table(ExtractSmd(table1) > 0.2))             #counting number of variables with SMD > 0.2, so 12
tab_with_smd <- (ExtractSmd(table1) > 0.2)
#print(tab_with_smd)
# Variables with SMD > 0.2 is:
# Coma
# aps1
# meanbp1
# alb1
# hema1
# crea1
# paco21
# wtkilo1
# dnr1
# resp
# card
# seps
#creating a dataframe to take a list of those variables
df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
Unmatched = as.numeric(ExtractSmd(table1)))
print(df_smd)
#print(df_smd$variable[df_smd$Unmatched==TRUE])
print("===================================================")
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
table1<- CreateTableOne(vars=colnames(rhc.selected), strata='treatment.swang', data=rhc.small, test=FALSE)
## include standardized mean difference (SMD)
print(table1, smd=TRUE)
## For which variables we do not have a good balance? Look at the slides for a guideline.
#As mentioned in slide 102, variables that have a serious imbalance are the ones with SMD > 0.2
addmargins(table(ExtractSmd(table1) > 0.2))             #counting number of variables with SMD > 0.2, so 12
tab_with_smd <- (ExtractSmd(table1) > 0.2)
#print(tab_with_smd)
# Variables with SMD > 0.2 is:
# Coma
# aps1
# meanbp1
# alb1
# hema1
# crea1
# paco21
# wtkilo1
# dnr1
# resp
# card
# seps
#creating a dataframe to take a list of those variables
df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
Unmatched = as.numeric(ExtractSmd(table1)))
print(df_smd)
df_smd$variable[df_smd$Unmatched>0.2]
print("===================================================")
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
table1<- CreateTableOne(vars=colnames(rhc.selected), strata='treatment.swang', data=rhc.small, test=FALSE)
## include standardized mean difference (SMD)
print(table1, smd=TRUE)
## For which variables we do not have a good balance? Look at the slides for a guideline.
#As mentioned in slide 102, variables that have a serious imbalance are the ones with SMD > 0.2
addmargins(table(ExtractSmd(table1) > 0.2))             #counting number of variables with SMD > 0.2, so 12
tab_with_smd <- (ExtractSmd(table1) > 0.2)
#print(tab_with_smd)
# Variables with SMD > 0.2 is:
# Coma
# aps1
# meanbp1
# alb1
# hema1
# crea1
# paco21
# wtkilo1
# dnr1
# resp
# card
# seps
#creating a dataframe to take a list of those variables
df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
Unmatched = as.numeric(ExtractSmd(table1)))
#print(df_smd)
df_smd$variable[df_smd$Unmatched>0.2]
print("===================================================")
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
table1<- CreateTableOne(vars=colnames(rhc.selected), strata='treatment.swang', data=rhc.small, test=FALSE)
## include standardized mean difference (SMD)
print(table1, smd=TRUE)
## For which variables we do not have a good balance? Look at the slides for a guideline.
#As mentioned in slide 102, variables that have a serious imbalance are the ones with SMD > 0.2
addmargins(table(ExtractSmd(table1) > 0.2))             #counting number of variables with SMD > 0.2, so 12
tab_with_smd <- (ExtractSmd(table1) > 0.2)
#print(tab_with_smd)
# Variables with SMD > 0.2 is:
# Coma
# aps1
# meanbp1
# alb1
# hema1
# crea1
# paco21
# wtkilo1
# dnr1
# resp
# card
# seps
#creating a dataframe to take a list of those variables
df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
Unmatched = as.numeric(ExtractSmd(table1)))
#print(df_smd)
print('Variables with smd >0.2:')
df_smd$variable[df_smd$Unmatched>0.2]
print("===================================================")
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr='treatment.swang' ,M=1, X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=colnames(rhc.selected) ,M=1, X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=treatment.swang , M=1, X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr='treatment.swang' , M=1, X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
X=rhc.selected[xvars]
f=rhc.selected[xvars]
rhc.selected[xvars]
xvars <- unlist(xvars)  #if necessary use 'unlist' so it is a vector instead of a list
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr='treatment.swang' , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
length('treatment.swang')
length(rhc.small['treatment.swang'])
length(rhc.small['treatment.swang'])
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=rhc.small['treatment.swang'] , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=mod , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=rhc.small$treatment.swang , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
length(rhc.small$treatment.swang)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=rhc.small$treatment.swang==1 , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=rhc.small$treatment.swang=='1' , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=(rhc.small$treatment.swang=='1') , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
#xvars <- unlist(xvars)  #if necessary use 'unlist' so it is a vector instead of a list
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=(rhc.small$treatment.swang == 1) , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
xvars <- unlist(xvars)  #if necessary use 'unlist' so it is a vector instead of a list
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=(rhc.small$treatment.swang == 1) , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=(rhc.small$treatment.swang) , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=(rhc.small$outcome.died) , M=1,X=rhc.selected[xvars], replace=FALSE) #??????not 100% sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=(rhc.small$treatment.swang) , M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=(rhc.selected[treatment.swang]) , M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=(rhc.small[treatment.swang]) , M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=(rhc.small$treatment.swang) , M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
rhc.selected
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
#vars=colnames(rhc.selected)
table1<- CreateTableOne(vars=xvars, strata='treatment.swang', data=rhc.small, test=FALSE)
## include standardized mean difference (SMD)
print(table1, smd=TRUE)
## For which variables we do not have a good balance? Look at the slides for a guideline.
#As mentioned in slide 102, variables that have a serious imbalance are the ones with SMD > 0.2
addmargins(table(ExtractSmd(table1) > 0.2))             #counting number of variables with SMD > 0.2 (= 12)
#creating a dataframe to extract those variables
df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
Unmatched = as.numeric(ExtractSmd(table1)))
print('Variables with smd > 0.2:')
df_smd$variable[df_smd$Unmatched>0.2]
#outcome: "Coma"    "aps1"    "meanbp1" "alb1"    "hema1"   "crea1"   "paco21"  "wtkilo1" "dnr1"    "resp"    "card"   "seps"
print("===================================================")
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=treatment.swang , M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
table1<- CreateTableOne(vars=xvars, strata='treatment.swang', data=rhc.selected, test=FALSE)
print("===================================================")
#=> look at "table 1", complete the command by filling in the "..."
table1<- CreateTableOne(vars=xvars, strata='treatment.swang', data=rhc.small, test=FALSE)
## include standardized mean difference (SMD)
print(table1, smd=TRUE)
## For which variables we do not have a good balance? Look at the slides for a guideline.
#As mentioned in slide 102, variables that have a serious imbalance are the ones with SMD > 0.2
addmargins(table(ExtractSmd(table1) > 0.2))             #counting number of variables with SMD > 0.2 (= 12)
#creating a dataframe to extract those variables
df_smd <- data.frame(variable = rownames(ExtractSmd(table1)),
Unmatched = as.numeric(ExtractSmd(table1)))
print('Variables with smd > 0.2:')
df_smd$variable[df_smd$Unmatched>0.2]
print("===================================================")
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=treatment , M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
greedymatch <- Match(Tr=rhc$treatment.swang , M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- as.numeric(rhc.small$treatment.swang)
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment<-as.numeric(rhc$swang1=='RHC')
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment<-as.numeric(rhc$swang1==1)
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment<-as.numeric(rhc$swang1)
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment<-as.numeric(rhc.small$swang1)
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment<-as.numeric(rhc.small$swang1)
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- rhc.small$swang1
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- rhc.small$swang1==1
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- rhc.small$swang1
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- rhc.selected$swang1
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- rhc.selected$swang1==1
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE) #???not sure why it does not work
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- rhc.selected$treatment.swang1  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- rhc.small$treatment.swang1  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- rhc.small$treatment.swang1==1  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- (rhc.small$treatment.swang1==1)  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
length(rhc.small$treatment.swang1==1)
length(rhc.small$treatment.swang1)
length(rhc.small$treatment.swang1)
length(rhc.small$treatment.swang)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- (rhc.small$treatment.swang==1)  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- (rhc.small$treatment.swang)  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- (treatment.swang)  ###?????? this is not correct, not sure why?????
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- (rhc$treatment.swang)  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- (rhc.small$treatment.swang)  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- (rhc.small$treatment.swang==1)  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
typeof((rhc.small$treatment.swang))
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- as.numeric(rhc.small$treatment.swang)  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- as.numeric(rhc.small$treatment.swang==1)  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- rhc.small$treatment.swang==1  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
typeof(rhc.small$treatment.swang==1)
print("===================================================")
# We want to match the treated with the untreated subjects. Find 1 on 1 match.
# # => Complete the command
treatment <- as.numeric(rhc.small$treatment.swang==1)  ###?????? this is not correct, not sure why?????
greedymatch <- Match(Tr=treatment, M=1,X=rhc.selected[xvars], replace=FALSE)
typeof(treatment)
