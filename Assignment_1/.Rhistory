#       0    a     b
#       1    c     d
# Enter these a, b, c, and d numbers in the following McNemar test
# print("===================================================")
mcnemar.test(matrix(c(...),2,2)) # => Complete the command by filling the a, b, c, and d numbers in the correct order.
print('The p-value is below 0.05.')
table(y_trt,y_con)
# In this table you will see the 2x2 table:
#         y_con
# ytreat     0     1
#       0    a     b
#       1    c     d
# Enter these a, b, c, and d numbers in the following McNemar test
# print("===================================================")
mcnemar.test(matrix(c(573,125,267,1219),2,2)) # => Complete the command by filling the a, b, c, and d numbers in the correct order.
# => Is the p-value less than 0.05? What does this result mean?
# print("===================================================")
gmodel1 <- glm(died ~ treatment, family=binomial, data=matched)
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
summary(gmodel1)
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
# =>  If the coefficient is positive, what does that mean in terms of odds ratio?
# => If the coefficient is negative, what does that mean in terms of odds ratio?
# The great thing about modelling is that we can now again adjust for the variables with the worst SMD. Adjust for the variable with the worst SMD that you encountered before. To adjust you just add the name of the variable in the logistic regression formula. => Complete the command
gmodel2 <- glm(died ~ treatment + ..., family=binomial, data=matched)
View(matched)
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
summary(gmodel1)
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
# =>  If the coefficient is positive, what does that mean in terms of odds ratio?
# => If the coefficient is negative, what does that mean in terms of odds ratio?
# The great thing about modelling is that we can now again adjust for the variables with the worst SMD. Adjust for the variable with the worst SMD that you encountered before. To adjust you just add the name of the variable in the logistic regression formula. => Complete the command
gmodel2 <- glm(outcome.died ~ treatment.swang + ..., family=binomial, data=matched)
print("===================================================")
# => Complete the command to create table 1 after matching
matchedtab1 <-  CreateTableOne(vars=xvars, strata='treatment.swang', data=matched, test=FALSE)
# => Print the balance with smd.
print(matchedtab1, smd = TRUE)
# => After matching how many "bad" variables with SMD > 0.2 are there?
addmargins(table(ExtractSmd(matchedtab1) > 0.2)) ## 3
print('There are 3 "bad" variables, meanbp1, aps1 and crea1')
print("===================================================")
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
summary(gmodel1)
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
# =>  If the coefficient is positive, what does that mean in terms of odds ratio?
# => If the coefficient is negative, what does that mean in terms of odds ratio?
# The great thing about modelling is that we can now again adjust for the variables with the worst SMD. Adjust for the variable with the worst SMD that you encountered before. To adjust you just add the name of the variable in the logistic regression formula. => Complete the command
gmodel2 <- glm(outcome.died ~ treatment.swang + asps1, family=binomial, data=matched)
View(matched)
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
summary(gmodel1)
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
# =>  If the coefficient is positive, what does that mean in terms of odds ratio?
# => If the coefficient is negative, what does that mean in terms of odds ratio?
# The great thing about modelling is that we can now again adjust for the variables with the worst SMD. Adjust for the variable with the worst SMD that you encountered before. To adjust you just add the name of the variable in the logistic regression formula. => Complete the command
gmodel2 <- glm(outcome.died ~ treatment.swang + aps1, family=binomial, data=matched)
# => What is the odds ratio for treatment now?
# print("===================================================")
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
summary(gmodel1)
exp(coef(results))
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
summary(gmodel1)
exp(coef(gmodel1))
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
# =>  If the coefficient is positive, what does that mean in terms of odds ratio?
# => If the coefficient is negative, what does that mean in terms of odds ratio?
# The great thing about modelling is that we can now again adjust for the variables with the worst SMD. Adjust for the variable with the worst SMD that you encountered before. To adjust you just add the name of the variable in the logistic regression formula. => Complete the command
gmodel2 <- glm(outcome.died ~ treatment.swang + aps1, family=binomial, data=matched)
# => What is the odds ratio for treatment now?
# print("===================================================")
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
exp(coef(gmodel1))
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
# =>  If the coefficient is positive, what does that mean in terms of odds ratio?
# => If the coefficient is negative, what does that mean in terms of odds ratio?
# The great thing about modelling is that we can now again adjust for the variables with the worst SMD. Adjust for the variable with the worst SMD that you encountered before. To adjust you just add the name of the variable in the logistic regression formula. => Complete the command
gmodel2 <- glm(outcome.died ~ treatment.swang + aps1, family=binomial, data=matched)
# => What is the odds ratio for treatment now?
# print("===================================================")
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
exp(coef(gmodel1['treatment.swang']))
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
exp(coef(gmodel1[1]))
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print()
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
exp(coef(gmodel1[1][1]))
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print()
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
exp(coef(gmodel1[1][1]))
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print()
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
exp(coef(gmodel1[1][2]))
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
exp(coef(gmodel1[1][1][1]))
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print()
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
exp(coef(gmodel1))
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print()
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
exp(coef(gmodel1[2]))
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
temp <- exp(coef(gmodel1))
print(temp[1])
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print()
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
temp <- exp(coef(gmodel1))
print(temp[2])
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print()
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
temp <- exp(coef(gmodel1))
print(temp[2][1])
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print()
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
temp <- exp(coef(gmodel1))
print(temp[2][2])
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print()
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
#summary(gmodel1)
exp(coef(gmodel1))
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print(The )
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
confint(gmodel1)
exp(coef(gmodel1)) ## 1.33 odds ratio for treatment
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print(The )
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
summary(gmodel1)
exp(coef(gmodel1)) ## 1.33 odds ratio for treatment
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print(The )
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
summary(gmodel1)
exp(coef(gmodel1)) ## 1.33 odds ratio for treatment
coef(gmodel1)
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
print("the coefficient of treatment is significant, since it has a p-value of 7e-06")
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print("the odds ratio for treatment, calculated")
# =>  If the coefficient is positive, what does that mean in terms of odds ratio?
# => If the coefficient is negative, what does that mean in terms of odds ratio?
# The great thing about modelling is that we can now again adjust for the variables with the worst SMD. Adjust for the variable with the worst SMD that you encountered before. To adjust you just add the name of the variable in the logistic regression formula. => Complete the command
gmodel2 <- glm(outcome.died ~ treatment.swang + aps1, family=binomial, data=matched)
# => What is the odds ratio for treatment now?
# print("===================================================")
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
summary(gmodel1)
exp(coef(gmodel1)) ## 1.33 odds ratio for treatment
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
print("the coefficient of treatment is significant, since it has a p-value of 7e-06")
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print("the odds ratio associated with treatment, calculated by exp(coefficient), is 1.33")
# =>  If the coefficient is positive, what does that mean in terms of odds ratio?
print("a positive coefficient implies that the odds ratio is above 1, in this context meaning treatment is associated with higher outcome of death")
# => If the coefficient is negative, what does that mean in terms of odds ratio?
print("a negative coefficient implies that the odds ratio is below 1, in this context meaning treatment is associated with lower outcome of death")
## Does this make sense?
# The great thing about modelling is that we can now again adjust for the variables with the worst SMD. Adjust for the variable with the worst SMD that you encountered before. To adjust you just add the name of the variable in the logistic regression formula. => Complete the command
gmodel2 <- glm(outcome.died ~ treatment.swang + aps1, family=binomial, data=matched)
exp(coef(gmodel2))
# => What is the odds ratio for treatment now?
# print("===================================================")
gmodel1 <- glm(outcome.died ~ treatment.swang, family=binomial, data=matched)
summary(gmodel1)
exp(coef(gmodel1)) ## 1.33 odds ratio for treatment
print("===================================================")
# => Is the coefficient of treatment significant? you can use summary(gmodel1) or confint(gmodel1)
print("the coefficient of treatment is significant, since it has a p-value of 7e-06")
# =>  What is the odds ratio that is associated with treatment? You can easily derive it from the coefficient (Google otherwise how to get the odds ratio from the coefficient)
print("the odds ratio associated with treatment, calculated by exp(coefficient), is 1.33")
# =>  If the coefficient is positive, what does that mean in terms of odds ratio?
print("a positive coefficient implies that the odds ratio is above 1, in this context meaning treatment is associated with higher outcome of death")
# => If the coefficient is negative, what does that mean in terms of odds ratio?
print("a negative coefficient implies that the odds ratio is below 1, in this context meaning treatment is associated with lower outcome of death")
## Does this make sense?
# The great thing about modelling is that we can now again adjust for the variables with the worst SMD. Adjust for the variable with the worst SMD that you encountered before. To adjust you just add the name of the variable in the logistic regression formula. => Complete the command
gmodel2 <- glm(outcome.died ~ treatment.swang + aps1, family=binomial, data=matched)
exp(coef(gmodel2))
# => What is the odds ratio for treatment now?
print('When adjusting the variable "aps1", the odds ratio of the treatment is ~1.12')
# print("===================================================")
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
psmodel <- glm(outcome.died ~ [xvars] , family=binomial, data=matched)
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
psmodel <- glm(outcome.died ~ xvars , family=binomial, data=matched)
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "outcome.died")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "outcome.died")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
print(pscore)
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "outcome.died")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "treatment.swang")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
par(mfrow=c(2,1))
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
par(mfrow=c(2,1))
hist(pscore)
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
par(mfrow=c(2,1))
hist(pscore$outcome.died)
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "treatment.swang")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "treatment.swang")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
pscore
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "treatment.swang")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
head(pscore)
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "treatment.swang")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
prs_df <- data.frame(pr_score = predict(psmodel, type = "response"),
treatment = m_ps$model$treatment.swang)
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "treatment.swang")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
prs_df <- data.frame(pr_score = predict(psmodel, type = "response"),
treatment = psmodel$model$treatment.swang)
#head(pscore)
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "treatment.swang")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
prs_df <- data.frame(pr_score = predict(psmodel, type = "response"),
treatment = psmodel$model$treatment.swang)
head(prs_df)
print("===================================================")
# => Use the variables we found before in xvars in the first assignment to predict treatment
form <- reformulate(xvars, response = "treatment.swang")
psmodel <- glm(formula=form , family=binomial, data=matched)
print("===================================================")
summary(psmodel)   # show coefficients etc
pscore<-psmodel$fitted.values # create propensity score
prs_df <- data.frame(pr_score = predict(psmodel, type = "response"),
treatment = psmodel$model$treatment.swang)
tail(prs_df)
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
par(mfrow=c(2,1))
hist(prs_df)
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
par(mfrow=c(2,1))
hist(prs_df$pr_score)
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df[prs_df$treatment = 1]
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df[prs_df$treatment == 1]
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$treatment[prs_df$treatment==1]
par(mfrow=c(2,1))
hist(prs_df$pr_score)
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$treatment[prs_df$treatment==1]
gotNoTreatment <- prs_df$treatment[prs_df$treatment==0]
par(mfrow=c(2,1))
hist(prs_df$pr_score)
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df[prs_df$treatment==1]
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$pr_score[prs_df$treatment==1]
gotNoTreatment <- prs_df[prs_df$treatment==0]
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$pr_score[prs_df$treatment==1]
gotNoTreatment <- prs_df$pr_score[prs_df$treatment==0]
par(mfrow=c(2,1))
hist(prs_df$pr_score)
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$pr_score[prs_df$treatment==1]
gotNoTreatment <- prs_df$pr_score[prs_df$treatment==0]
par(mfrow=c(2,1))
hist(gotTreatment, ylim=c(0,650))
hist(gotNoTreatment, ylim=c(650,0))
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$pr_score[prs_df$treatment==1]
gotNoTreatment <- prs_df$pr_score[prs_df$treatment==0]
par(mfrow=c(2,1))
hist(gotTreatment, ylim=c(0,650), col='darkblue')
hist(gotNoTreatment, ylim=c(650,0), col='darkblue')
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$pr_score[prs_df$treatment==1]
gotNoTreatment <- prs_df$pr_score[prs_df$treatment==0]
#par(mfrow=c(2,1))
hist(gotTreatment, ylim=c(0,650), col='darkblue')
hist(gotNoTreatment, ylim=c(650,0), col='darkblue')
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$pr_score[prs_df$treatment==1]
gotNoTreatment <- prs_df$pr_score[prs_df$treatment==0]
par(mfrow=c(2,1))
hist(gotTreatment, ylim=c(0,650), col='darkblue')
hist(gotNoTreatment, ylim=c(650,0), col='darkblue')
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$pr_score[prs_df$treatment==1]
gotNoTreatment <- prs_df$pr_score[prs_df$treatment==0]
par(mfrow=c(2,1))
hist(gotNoTreatment, ylim=c(650,0), col='darkblue')
hist(gotTreatment, ylim=c(0,650), col='darkblue')
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$pr_score[prs_df$treatment==1]
gotNoTreatment <- prs_df$pr_score[prs_df$treatment==0]
par(mfrow=c(2,1))
hist(gotTreatment, ylim=c(0,650), col='darkblue')
hist(gotNoTreatment, ylim=c(650,0), col='darkblue')
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
#  => plot the density of the propensity scores of the treated and untreated. Tip: you might want to use par(mfrow=c(2,1)) to create 2 panels (2 rows, 1 column) and then plotting the first hist, with say, ylim=c(0,650) and col='darkblue', and the second histogram with ylim=c(650, 0) (note that we flipped the order) and col='darkblue'. This will plot the blue histogram as a normal histogram and the red one will be plotted upside down underneath the blue one so you can easily see the overlap.
gotTreatment <- prs_df$pr_score[prs_df$treatment==1]
gotNoTreatment <- prs_df$pr_score[prs_df$treatment==0]
par(mfrow=c(2,1))
hist(gotTreatment, ylim=c(0,650), col='darkblue')
hist(gotNoTreatment, ylim=c(650,0), col='red')
# => What do you think about the overlap?
print("===================================================")
print("===================================================")
logit <- function(p) {
return(log(p/(1-p)))
} # => Complete this function to calculate the log odds
print("===================================================")
print("===================================================")
logit(gotTreatment)
print("===================================================")
print("===================================================")
logit(gotTreatment)
logit(gotNoTreatment)
print("===================================================")
print("===================================================")
logit <- function(p) {
return(log(p)-log(1-p))
} # => Complete this function to calculate the log odds
print("===================================================")
print("===================================================")
logit(gotTreatment)
logit(gotNoTreatment)
print("===================================================")
print("===================================================")
logit <- function(p) {
return(exp(p))
} # => Complete this function to calculate the log odds
print("===================================================")
print("===================================================")
logit(gotTreatment)
logit(gotNoTreatment)
print("===================================================")
print("===================================================")
logit <- function(p) {
return(log(p/(1-p)))
} # => Complete this function to calculate the log odds
print("===================================================")
print("===================================================")
logit(gotTreatment)
logit(gotNoTreatment)
print("===================================================")
print("===================================================")
# => Check the overlap between the propensity scores for the two groups. What do you think about the overlap?
## idk what to do here
logitTreatment <- logit(gotTreatment)
logitNoTreatment <- logit(gotNoTreatment)
par(mfrow=c(2,1))
hist(logitTreatment, ylim=c(0,650), col='darkblue')
hist(logitNoTreatment, ylim=c(650,0), col='red')
print("===================================================")
